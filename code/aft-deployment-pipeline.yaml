AWSTemplateFormatVersion: '2010-09-09'
Description: "AFT bootstrap deployment"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "AFT (Account Factory for Terraform) bootstrap pipeline"
        Parameters:
          - pVCSProvider
          - pConnectionName
          - pRepositoryName
          - pBranchName
          - pCodeBuildDockerImage
          - pTerraformVersion
    ParameterLabels:
      pRepositoryName:
        default: Repository Name
      pBranchName:
        default: Branch Name
      pCodeBuildDockerImage:
        default: CodeBuild Docker Image
      pTerraformVersion:
        default: AFT Terraform Version

Parameters:
  pVCSProvider:
    Type: String
    Default: GitHub
    AllowedValues:
      - GitHub
      - Bitbucket
      - GitLab
    Description: "Select the Version Control System provider"

  pConnectionName:
    Type: String
    Default: "aft-vcs-connection"
    Description: "Name for the CodeStar connection (required if GitHub or Bitbucket is selected)"

  # AFT Bootstrap Pipeline Params
  pRepositoryName:
    Type: String
    Default: aft-setup
    Description: "Input the source repository name to be used to setup AFT. Example some-org/my-repo"
  
  pBranchName:
    Type: String
    Default: main
    Description: "Input the source repository branch name."

  pCodeBuildDockerImage:
    Type: String
    Default: "aws/codebuild/amazonlinux2-x86_64-standard:4.0"
    Description: "Input the AWS CodeBuild docker base image version to run the pipeline."

  pTerraformVersion:
    Type: String
    Default: "1.9.8"
    Description: "Input the Terraform version to be used on AFT pipelines. (default: 1.9.8)"

Conditions:
  cUseGitHub: !Equals [ !Ref pVCSProvider, "GitHub" ]
  cUseBitbucket: !Equals [ !Ref pVCSProvider, "Bitbucket" ]
  cUseGitLab: !Equals [ !Ref pVCSProvider, "GitLab" ]
  cUseCodeStar: !Or [ !Condition cUseGitHub, !Condition cUseBitbucket, !Condition cUseGitLab ]
  
Resources:
  rCodeStarConnection:
    Condition: cUseCodeStar
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: !Ref pConnectionName
      ProviderType: !Ref pVCSProvider
      Tags:
        - Key: Purpose
          Value: AFT-VCS-Connection

  rTerraformBackendBucket:
    #checkov:skip=CKV_AWS_18:There is no need to enable log in this bucket.
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      BucketName: !Sub "${AWS::StackName}-tf-backend-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true 
      VersioningConfiguration:
        Status: Enabled
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "There is no need to enable log in this bucket."      
          - id: W51
            reason: "This bucket will be accessible only within the account to store the terraform state"             

  rCodePipelineArtifactBucket:
    #checkov:skip=CKV_AWS_18:There is no need to enable log in this bucket.
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      BucketName: !Sub "${AWS::StackName}-codepipeline-artifacts-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true 
      VersioningConfiguration:
        Status: Enabled
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "There is no need to enable log in this bucket."      
          - id: W51
            reason: "This bucket will be accessible only within the account to store the pipeline artifacts"        

  rCodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodePipelineVCSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !If
                  - cUseCodeStar
                  - !Ref rCodeStarConnection
                  - !Ref "AWS::NoValue"
        - PolicyName: CodePipelinePermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: 
                  - !GetAtt rCodeBuildTerraformPlan.Arn
                  - !GetAtt rCodeBuildTerraformApply.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource: !Sub arn:${AWS::Partition}:s3:::${rCodePipelineArtifactBucket}/*         
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F38
            reason: "Wildcard is required for these IAM actions"
          - id: W11
            reason: "Wildcard is required for these IAM actions"      

  rCodeBuildServiceRole:
    #checkov:skip=CKV_AWS_111:Wildcard is required for these IAM actions
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LogAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents   
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:List*
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${rCodePipelineArtifactBucket}"
                  - !Sub "arn:${AWS::Partition}:s3:::${rCodePipelineArtifactBucket}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::${rTerraformBackendBucket}"
                  - !Sub "arn:${AWS::Partition}:s3:::${rTerraformBackendBucket}/*"
        - PolicyName: CodeBuildPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterfacePermission
                Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
                Condition: 
                  StringEquals:
                    ec2:AuthorizedService: "codebuild.amazonaws.com"
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - organizations:Describe*
                  - organizations:List*
                Resource: "*"
        - PolicyName: IAMPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/AWSControlTowerExecution"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aft-*"
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:TagRole
                  - iam:AttachRolePolicy
                  - iam:PutRolePolicy
                  - iam:List*
                  - iam:Get*
                Resource: 
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aft-control-tower-events-rule"
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/AWSAFTExecution"
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/AWSAFTService"
        - PolicyName: EventBridgePermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - events:List*
                  - events:DeleteRule
                  - events:DisableRule
                  - events:EnableRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource: 
                  - !Sub "arn:${AWS::Partition}:events:*:${AWS::AccountId}:rule/aft-capture-ct-events"
              - Effect: Allow
                Action:
                  - events:DescribeRule
                  - events:TagResource
                  - events:UntagResource
                  - events:PutRule
                Resource: "*"
                Condition:
                  StringEqualsIfExists:
                    events:creatorAccount: "${aws:PrincipalAccount}"
        - PolicyName: SSMParameterPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: !Sub "arn:${AWS::Partition}:ssm:*:*:parameter/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F38
            reason: "Wildcard is required for these IAM actions"
          - id: W11
            reason: "Wildcard is required for these IAM actions"
  
  rCodeBuildTerraformPlan:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref pCodeBuildDockerImage
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_NAME
            Value: !Ref pRepositoryName
          - Name: REPOSITORY_BRANCH
            Value: !Ref pBranchName
      Name: !Sub "${AWS::StackName}-bootstrap-pipeline-tf-plan"
      ServiceRole: !Ref rCodeBuildServiceRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              TERRAFORM_VERSION: "${pTerraformVersion}"
          phases:
            install:
              commands:
                - |
                  set -e
                  echo $TERRAFORM_VERSION
                  echo "Installing Terraform"
                  cd /tmp
                  curl -q -o terraform_${pTerraformVersion}_linux_amd64.zip https://releases.hashicorp.com/terraform/${pTerraformVersion}/terraform_${pTerraformVersion}_linux_amd64.zip
                  unzip -q -o terraform_${pTerraformVersion}_linux_amd64.zip
                  mv terraform /usr/local/bin/
                  terraform -no-color --version
            pre_build:
              on-failure: ABORT
              commands:
                - |
                  cd $CODEBUILD_SRC_DIR/terraform
                  echo "Initializing and validating terraform"
                  terraform fmt -no-color
                  terraform init -no-color
                  terraform validate -no-color        
            build:
              on-failure: ABORT
              commands:
                - | 
                  echo "Running terraform plan"
                  terraform plan -no-color -out output.tfplan
            post_build:
              commands:
                - echo "Terraform plan successfully run"
          artifacts:
            files:
              - '**/*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: "CodeBuild is using the managed CMK for Amazon Simple Storage Service (Amazon S3) by default"
    
  rCodeBuildTerraformApply:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref pCodeBuildDockerImage
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_NAME
            Value: !Ref pRepositoryName
          - Name: REPOSITORY_BRANCH
            Value: !Ref pBranchName
      Name: !Sub "${AWS::StackName}-bootstrap-pipeline-tf-apply"
      ServiceRole: !Ref rCodeBuildServiceRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              TERRAFORM_VERSION: "${pTerraformVersion}"
          phases:
            install:
              commands:
                - |
                  set -e
                  echo $TERRAFORM_VERSION
                  echo "Installing terraform"
                  cd /tmp
                  curl -q -o terraform_${pTerraformVersion}_linux_amd64.zip https://releases.hashicorp.com/terraform/${pTerraformVersion}/terraform_${pTerraformVersion}_linux_amd64.zip
                  unzip -q -o terraform_${pTerraformVersion}_linux_amd64.zip
                  mv terraform /usr/local/bin/
                  terraform -no-color --version
            build:
              on-failure: ABORT
              commands:
                - |
                  cd $CODEBUILD_SRC_DIR/terraform
                  echo "Running terraform apply"
                  terraform apply -no-color -input=false --auto-approve "output.tfplan"
            post_build:
              commands:
                - echo "AFT setup deployment successfully"
          artifacts:
            files:
              - '**/*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: "CodeBuild is using the managed CMK for Amazon Simple Storage Service (Amazon S3) by default"

  rCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: rCodeStarConnection
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref rCodePipelineArtifactBucket    
      Name: !Sub "${AWS::StackName}-bootstrap-pipeline"
      RoleArn: !GetAtt rCodePipelineServiceRole.Arn  
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref rCodeStarConnection
                FullRepositoryId: !Ref pRepositoryName
                BranchName: !Ref pBranchName
              OutputArtifacts:
                - Name: code
              RunOrder: 1
            - !Ref "AWS::NoValue"
        - Name: Build
          Actions:
            - Name: terraform-plan
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref rCodeBuildTerraformPlan
              InputArtifacts:
                - Name: code
              OutputArtifacts:
                - Name: plan
              RunOrder: 1
        - Name: Approval
          Actions:
            - Name: approve
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: '1'
                Provider: Manual
              Configuration:
                CustomData: "Check the terraform plan output and approve before the changes are implemented."
        - Name: Deploy
          Actions:
            - Name: terraform-apply
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref rCodeBuildTerraformApply
              InputArtifacts:
                - Name: plan
              OutputArtifacts:
                - Name: apply
              RunOrder: 1

Outputs:
  TerraformBackendBucketName:
    Value: !Ref rTerraformBackendBucket

  CodeStarConnectionArn:
    Condition: cUseCodeStar
    Description: "ARN of the CodeStar Connection (Pending authentication)"
    Value: !Ref rCodeStarConnection

  CodeStarConnectionStatus:
    Condition: cUseCodeStar
    Description: "Status of the CodeStar Connection"
    Value: "PENDING - Please complete the connection authorization in the AWS Console"
